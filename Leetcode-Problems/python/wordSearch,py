from typing import List

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        totRows, totCols = len(board), len(board[0])
        def dfs(i, row, col):
            if (i == len(word) - 1) and (board[row][col] == word[i]):
                return True
            if board[row][col] != word[i]:
                return False
            i += 1
            visited[row][col] = True
            if (row + 1 < totRows) and (not visited[row + 1][col]) and dfs(i, row + 1, col):
                return True
            if (row - 1 >= 0) and (not visited[row - 1][col]) and dfs(i, row - 1, col):
                return True
            if (col + 1 < totCols) and (not visited[row][col + 1]) and dfs(i, row, col + 1):
                return True
            if (col - 1 >= 0) and (not visited[row][col - 1]) and dfs(i, row, col - 1):
                return True
            visited[row][col] = False
            return False
        for i in range(totRows):
            for j in range(totCols):
                visited = [[False] * totCols for _ in range(totRows)]
                if dfs(0, i, j):
                    return True
        return False
            
            
            
        